// Code generated by gocc; DO NOT EDIT.

package parser

import (
    "babyduck/token"
    "babyduck/data_structures"
)
// Creamos un contexto Ãºnico para todo el programa:
var ctx = data_structures.NewContext()

type (
	ProdTab      [numProductions]ProdTabEntry
	ProdTabEntry struct {
		String     string
		Id         string
		NTType     int
		Index      int
		NumSymbols int
		ReduceFunc func([]Attrib, interface{}) (Attrib, error)
	}
	Attrib interface {
	}
)

var productionsTable = ProdTab{
	ProdTabEntry{
		String: `S' : Start	<<  >>`,
		Id:         "S'",
		NTType:     0,
		Index:      0,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Start : Reset Programa	<< ctx.ReturnContext() >>`,
		Id:         "Start",
		NTType:     1,
		Index:      1,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ctx.ReturnContext()
		},
	},
	ProdTabEntry{
		String: `Reset : empty	<< ctx.Reset() >>`,
		Id:         "Reset",
		NTType:     2,
		Index:      2,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ctx.Reset()
		},
	},
	ProdTabEntry{
		String: `Programa : ProgramId Vars Funcs "main" Body "end"	<< ctx.MakeEndQuad() >>`,
		Id:         "Programa",
		NTType:     3,
		Index:      3,
		NumSymbols: 6,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ctx.MakeEndQuad()
		},
	},
	ProdTabEntry{
		String: `ProgramId : "program" id ";"	<< ctx.RegisterProgramId(string(X[1].(*token.Token).Lit)) >>`,
		Id:         "ProgramId",
		NTType:     4,
		Index:      4,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ctx.RegisterProgramId(string(X[1].(*token.Token).Lit))
		},
	},
	ProdTabEntry{
		String: `Vars : empty	<<  >>`,
		Id:         "Vars",
		NTType:     5,
		Index:      5,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `Vars : "var" VarsDec	<<  >>`,
		Id:         "Vars",
		NTType:     5,
		Index:      6,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `VarsDec : empty	<<  >>`,
		Id:         "VarsDec",
		NTType:     6,
		Index:      7,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `VarsDec : VarList ":" Type ";" VarsDec	<< ctx.RegisterVars(X[0].([]string), X[2].(int)) >>`,
		Id:         "VarsDec",
		NTType:     6,
		Index:      8,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ctx.RegisterVars(X[0].([]string), X[2].(int))
		},
	},
	ProdTabEntry{
		String: `VarList : id	<< data_structures.MakeVarList(string(X[0].(*token.Token).Lit)) >>`,
		Id:         "VarList",
		NTType:     7,
		Index:      9,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return data_structures.MakeVarList(string(X[0].(*token.Token).Lit))
		},
	},
	ProdTabEntry{
		String: `VarList : id "," VarList	<< data_structures.ConcatVarList(string(X[0].(*token.Token).Lit), X[2].([]string)) >>`,
		Id:         "VarList",
		NTType:     7,
		Index:      10,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return data_structures.ConcatVarList(string(X[0].(*token.Token).Lit), X[2].([]string))
		},
	},
	ProdTabEntry{
		String: `Type : "int"	<< data_structures.Int, nil >>`,
		Id:         "Type",
		NTType:     8,
		Index:      11,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return data_structures.Int, nil
		},
	},
	ProdTabEntry{
		String: `Type : "float"	<< data_structures.Float, nil >>`,
		Id:         "Type",
		NTType:     8,
		Index:      12,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return data_structures.Float, nil
		},
	},
	ProdTabEntry{
		String: `Funcs : empty	<<  >>`,
		Id:         "Funcs",
		NTType:     9,
		Index:      13,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `Funcs : Func Funcs	<<  >>`,
		Id:         "Funcs",
		NTType:     9,
		Index:      14,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Func : FuncStart Vars Body "]" ";"	<< ctx.ExitFunction() >>`,
		Id:         "Func",
		NTType:     10,
		Index:      15,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ctx.ExitFunction()
		},
	},
	ProdTabEntry{
		String: `FuncStart : "void" id "(" ")" "["	<< ctx.RegisterAndEnterFunction(string(X[1].(*token.Token).Lit), data_structures.Void, []data_structures.Param{}) >>`,
		Id:         "FuncStart",
		NTType:     11,
		Index:      16,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ctx.RegisterAndEnterFunction(string(X[1].(*token.Token).Lit), data_structures.Void, []data_structures.Param{})
		},
	},
	ProdTabEntry{
		String: `FuncStart : "void" id "(" ParamList ")" "["	<< ctx.RegisterAndEnterFunction(string(X[1].(*token.Token).Lit), data_structures.Void, X[3].([]data_structures.Param)) >>`,
		Id:         "FuncStart",
		NTType:     11,
		Index:      17,
		NumSymbols: 6,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ctx.RegisterAndEnterFunction(string(X[1].(*token.Token).Lit), data_structures.Void, X[3].([]data_structures.Param))
		},
	},
	ProdTabEntry{
		String: `ParamList : id ":" Type	<< data_structures.MakeParam(string(X[0].(*token.Token).Lit),X[2].(int)) >>`,
		Id:         "ParamList",
		NTType:     12,
		Index:      18,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return data_structures.MakeParam(string(X[0].(*token.Token).Lit),X[2].(int))
		},
	},
	ProdTabEntry{
		String: `ParamList : id ":" Type "," ParamList	<< data_structures.PrependParam(string(X[0].(*token.Token).Lit), X[2].(int), X[4].([]data_structures.Param)) >>`,
		Id:         "ParamList",
		NTType:     12,
		Index:      19,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return data_structures.PrependParam(string(X[0].(*token.Token).Lit), X[2].(int), X[4].([]data_structures.Param))
		},
	},
	ProdTabEntry{
		String: `Body : "{" StatementList "}"	<<  >>`,
		Id:         "Body",
		NTType:     13,
		Index:      20,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `StatementList : empty	<<  >>`,
		Id:         "StatementList",
		NTType:     14,
		Index:      21,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `StatementList : Statement StatementList	<<  >>`,
		Id:         "StatementList",
		NTType:     14,
		Index:      22,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Statement : Assign	<<  >>`,
		Id:         "Statement",
		NTType:     15,
		Index:      23,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Statement : Condition	<<  >>`,
		Id:         "Statement",
		NTType:     15,
		Index:      24,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Statement : CycleBody	<<  >>`,
		Id:         "Statement",
		NTType:     15,
		Index:      25,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Statement : F_Call	<<  >>`,
		Id:         "Statement",
		NTType:     15,
		Index:      26,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Statement : Print	<<  >>`,
		Id:         "Statement",
		NTType:     15,
		Index:      27,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Assign : id "=" Expression ";"	<< ctx.ValidateAssign(string(X[0].(*token.Token).Lit), X[2].(int)) >>`,
		Id:         "Assign",
		NTType:     16,
		Index:      28,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ctx.ValidateAssign(string(X[0].(*token.Token).Lit), X[2].(int))
		},
	},
	ProdTabEntry{
		String: `Expression : AddExpr RelExpr	<<  >>`,
		Id:         "Expression",
		NTType:     17,
		Index:      29,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `RelExpr : empty	<<  >>`,
		Id:         "RelExpr",
		NTType:     18,
		Index:      30,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `RelExpr : RelOp AddExpr	<< ctx.GenerateQuad() >>`,
		Id:         "RelExpr",
		NTType:     18,
		Index:      31,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ctx.GenerateQuad()
		},
	},
	ProdTabEntry{
		String: `RelOp : "<"	<< ctx.TranslateOp(string(X[0].(*token.Token).Lit)) >>`,
		Id:         "RelOp",
		NTType:     19,
		Index:      32,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ctx.TranslateOp(string(X[0].(*token.Token).Lit))
		},
	},
	ProdTabEntry{
		String: `RelOp : ">"	<< ctx.TranslateOp(string(X[0].(*token.Token).Lit)) >>`,
		Id:         "RelOp",
		NTType:     19,
		Index:      33,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ctx.TranslateOp(string(X[0].(*token.Token).Lit))
		},
	},
	ProdTabEntry{
		String: `RelOp : "!="	<< ctx.TranslateOp(string(X[0].(*token.Token).Lit)) >>`,
		Id:         "RelOp",
		NTType:     19,
		Index:      34,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ctx.TranslateOp(string(X[0].(*token.Token).Lit))
		},
	},
	ProdTabEntry{
		String: `AddExpr : AddExpr MoreLess MulExpr	<< ctx.GenerateQuad() >>`,
		Id:         "AddExpr",
		NTType:     20,
		Index:      35,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ctx.GenerateQuad()
		},
	},
	ProdTabEntry{
		String: `AddExpr : MulExpr	<<  >>`,
		Id:         "AddExpr",
		NTType:     20,
		Index:      36,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `MoreLess : "+"	<< ctx.TranslateOp(string(X[0].(*token.Token).Lit)) >>`,
		Id:         "MoreLess",
		NTType:     21,
		Index:      37,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ctx.TranslateOp(string(X[0].(*token.Token).Lit))
		},
	},
	ProdTabEntry{
		String: `MoreLess : "-"	<< ctx.TranslateOp(string(X[0].(*token.Token).Lit)) >>`,
		Id:         "MoreLess",
		NTType:     21,
		Index:      38,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ctx.TranslateOp(string(X[0].(*token.Token).Lit))
		},
	},
	ProdTabEntry{
		String: `MulExpr : MulExpr MulDiv Primary	<< ctx.GenerateQuad() >>`,
		Id:         "MulExpr",
		NTType:     22,
		Index:      39,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ctx.GenerateQuad()
		},
	},
	ProdTabEntry{
		String: `MulExpr : Primary	<<  >>`,
		Id:         "MulExpr",
		NTType:     22,
		Index:      40,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `MulDiv : "*"	<< ctx.TranslateOp(string(X[0].(*token.Token).Lit)) >>`,
		Id:         "MulDiv",
		NTType:     23,
		Index:      41,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ctx.TranslateOp(string(X[0].(*token.Token).Lit))
		},
	},
	ProdTabEntry{
		String: `MulDiv : "/"	<< ctx.TranslateOp(string(X[0].(*token.Token).Lit)) >>`,
		Id:         "MulDiv",
		NTType:     23,
		Index:      42,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ctx.TranslateOp(string(X[0].(*token.Token).Lit))
		},
	},
	ProdTabEntry{
		String: `Primary : LeftPar Expression RightPar	<< data_structures.ReturnExpression(X[1].(int)) >>`,
		Id:         "Primary",
		NTType:     24,
		Index:      43,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return data_structures.ReturnExpression(X[1].(int))
		},
	},
	ProdTabEntry{
		String: `Primary : id	<< ctx.ResolveVarType(string(X[0].(*token.Token).Lit)) >>`,
		Id:         "Primary",
		NTType:     24,
		Index:      44,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ctx.ResolveVarType(string(X[0].(*token.Token).Lit))
		},
	},
	ProdTabEntry{
		String: `Primary : cte_int	<< ctx.ResolveCteInt(string(X[0].(*token.Token).Lit)) >>`,
		Id:         "Primary",
		NTType:     24,
		Index:      45,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ctx.ResolveCteInt(string(X[0].(*token.Token).Lit))
		},
	},
	ProdTabEntry{
		String: `Primary : cte_float	<< ctx.ResolveCteFloat(string(X[0].(*token.Token).Lit)) >>`,
		Id:         "Primary",
		NTType:     24,
		Index:      46,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ctx.ResolveCteFloat(string(X[0].(*token.Token).Lit))
		},
	},
	ProdTabEntry{
		String: `LeftPar : "("	<< ctx.TranslateOp(string(X[0].(*token.Token).Lit)) >>`,
		Id:         "LeftPar",
		NTType:     25,
		Index:      47,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ctx.TranslateOp(string(X[0].(*token.Token).Lit))
		},
	},
	ProdTabEntry{
		String: `RightPar : ")"	<< ctx.TranslateOp(string(X[0].(*token.Token).Lit)) >>`,
		Id:         "RightPar",
		NTType:     26,
		Index:      48,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ctx.TranslateOp(string(X[0].(*token.Token).Lit))
		},
	},
	ProdTabEntry{
		String: `Print : "print" "(" ArgListPrint ")" ";"	<<  >>`,
		Id:         "Print",
		NTType:     27,
		Index:      49,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ArgListComma : Expression ","	<< ctx.MakeParamQuad() >>`,
		Id:         "ArgListComma",
		NTType:     28,
		Index:      50,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ctx.MakeParamQuad()
		},
	},
	ProdTabEntry{
		String: `ArgList : Expression	<< ctx.MakeParamQuad() >>`,
		Id:         "ArgList",
		NTType:     29,
		Index:      51,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ctx.MakeParamQuad()
		},
	},
	ProdTabEntry{
		String: `ArgList : ArgListComma ArgList	<<  >>`,
		Id:         "ArgList",
		NTType:     29,
		Index:      52,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ExprComma : Expression ","	<< ctx.PrintQuad() >>`,
		Id:         "ExprComma",
		NTType:     30,
		Index:      53,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ctx.PrintQuad()
		},
	},
	ProdTabEntry{
		String: `ArgListPrint : Expression	<< ctx.PrintQuad() >>`,
		Id:         "ArgListPrint",
		NTType:     31,
		Index:      54,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ctx.PrintQuad()
		},
	},
	ProdTabEntry{
		String: `ArgListPrint : ExprComma ArgListPrint	<<  >>`,
		Id:         "ArgListPrint",
		NTType:     31,
		Index:      55,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ArgListPrint : cte_string	<< ctx.ResolveCteSting(string(X[0].(*token.Token).Lit)) >>`,
		Id:         "ArgListPrint",
		NTType:     31,
		Index:      56,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ctx.ResolveCteSting(string(X[0].(*token.Token).Lit))
		},
	},
	ProdTabEntry{
		String: `Cycle : "while"	<< ctx.CycleJump() >>`,
		Id:         "Cycle",
		NTType:     32,
		Index:      57,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ctx.CycleJump()
		},
	},
	ProdTabEntry{
		String: `CycleBody : CycleCond "do" Body ";"	<< ctx.WhileJump() >>`,
		Id:         "CycleBody",
		NTType:     33,
		Index:      58,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ctx.WhileJump()
		},
	},
	ProdTabEntry{
		String: `CycleCond : Cycle "(" Expression ")"	<< ctx.MakeGFQuad(X[2].(int)) >>`,
		Id:         "CycleCond",
		NTType:     34,
		Index:      59,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ctx.MakeGFQuad(X[2].(int))
		},
	},
	ProdTabEntry{
		String: `Condition : CondCheck Body ElseBody ";"	<< ctx.FillJump() >>`,
		Id:         "Condition",
		NTType:     35,
		Index:      60,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ctx.FillJump()
		},
	},
	ProdTabEntry{
		String: `CondCheck : "if" "(" Expression ")"	<< ctx.MakeGFQuad(X[2].(int)) >>`,
		Id:         "CondCheck",
		NTType:     36,
		Index:      61,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ctx.MakeGFQuad(X[2].(int))
		},
	},
	ProdTabEntry{
		String: `ElseBody : ElseCond Body	<<  >>`,
		Id:         "ElseBody",
		NTType:     37,
		Index:      62,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ElseBody : empty	<<  >>`,
		Id:         "ElseBody",
		NTType:     37,
		Index:      63,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `ElseCond : "else"	<< ctx.ElseJumpIf() >>`,
		Id:         "ElseCond",
		NTType:     38,
		Index:      64,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ctx.ElseJumpIf()
		},
	},
	ProdTabEntry{
		String: `F_Call : F_Id ")" ";"	<< ctx.FunctionCallEnd(X[0].(string)) >>`,
		Id:         "F_Call",
		NTType:     39,
		Index:      65,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ctx.FunctionCallEnd(X[0].(string))
		},
	},
	ProdTabEntry{
		String: `F_Call : F_Id ArgList ")" ";"	<< ctx.FunctionCallEnd(X[0].(string)) >>`,
		Id:         "F_Call",
		NTType:     39,
		Index:      66,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ctx.FunctionCallEnd(X[0].(string))
		},
	},
	ProdTabEntry{
		String: `F_Id : id "("	<< ctx.FunctionCall(string(X[0].(*token.Token).Lit)) >>`,
		Id:         "F_Id",
		NTType:     40,
		Index:      67,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ctx.FunctionCall(string(X[0].(*token.Token).Lit))
		},
	},
}
