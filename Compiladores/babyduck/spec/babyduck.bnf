/* BabyDuck Grammar combining lexical and syntax parts for gocc */

/* === LEXICAL PART === */

id        : 'a'-'z' { 'a'-'z' | '-' } ;
cte_int   : '0'-'9' { '0'-'9' } ;
cte_float : '0'-'9' { '0'-'9' } '.' '0'-'9' { '0'-'9' } ;
cte_string: '\'' { . } '\'' ;
!whitespace: ' ' | '\t' | '\r' | '\n' ;
!comment  : '*' '*' { . } '*' '*' ;

/* === SYNTAX PART === */

<<
import (
    "babyduck/token"
    "babyduck/data_structures"
)
// Creamos un contexto Ãºnico para todo el programa:
var ctx = data_structures.NewContext()
>>

Start
    : Reset Programa
      << ctx.ReturnContext() >>
    ;

/* No-terminal auxiliar que limpia el contexto */
Reset
    : empty
      << ctx.Reset(); return nil, nil >>
    ;

Programa
    : "program" id ";" Vars Funcs "main" Body "end"
    ;

Vars
    : empty
    | "var" VarList ":" Type ";" Vars 
    << ctx.RegisterGlobalVars(X[1].([]string), X[3].(data_structures.Tipo)) >>
    ;

VarList
    : id  
    << data_structures.MakeVarList(string(X[0].(*token.Token).Lit)) >>
    | id "," VarList 
    << data_structures.ConcatVarList(string(X[0].(*token.Token).Lit), X[2].([]string)) >>
    ;

Type
    : "int"   << data_structures.Int, nil >>
    | "float" << data_structures.Float, nil >>
    ;

Funcs
    : empty
    | Func Funcs ;

Func
    : "void" id "(" ")" "[" Vars Body "]" ";"
      << ctx.RegisterFunction(string(X[1].(*token.Token).Lit), data_structures.Void, nil) >>
    | "void" id "(" ParamList ")" "[" Vars Body "]" ";" 
      << ctx.RegisterFunction(string(X[1].(*token.Token).Lit), data_structures.Void, X[3].([]data_structures.Tipo)) >>
    ;

ParamList
    : id ":" Type
      << data_structures.MakeParamList(X[2].(data_structures.Tipo)) >>
    | id ":" Type "," ParamList 
      << data_structures.ConcatParamList(X[2].(data_structures.Tipo), X[4].([]data_structures.Tipo)) >>
    ;

Body
    : "{" StatementList "}" ;

StatementList
    : empty
    | Statement StatementList ;

Statement
    : Assign
    | Condition
    | Cycle
    | F_Call
    | Print ;

Assign
    : id "=" Expression ";" 
      << ctx.ValidateAssign(string(X[0].(*token.Token).Lit), X[2].(data_structures.Tipo)) >>
    ;

Expression
    : AddExpr RelExpr ;

RelExpr
    : empty
    | RelOp AddExpr ;

RelOp
    : "<"
    | ">"
    | "!=" ;

AddExpr
    : AddExpr "+" MulExpr
    | AddExpr "-" MulExpr
    | MulExpr ;

MulExpr
    : MulExpr "*" Primary
    | MulExpr "/" Primary
    | Primary ;

Primary
    : "(" Expression ")"
      << data_structures.ReturnExpression(X[1].(data_structures.Tipo)) >>
    | id 
      << ctx.ResolveVarType(string(X[0].(*token.Token).Lit)) >>
    | cte_int << data_structures.Int, nil >>
    | cte_float << data_structures.Float, nil >>
    ;

Print
    : "print" "(" ")" ";"
    | "print" "(" ArgList ")" ";" ;

ArgList
    : Expression
    | Expression "," ArgList 
    | cte_string<< data_structures.String, nil >> ;

Cycle
    : "while" "(" Expression ")" "do" Body ";" ;

Condition
    : "if" "(" Expression ")" Body "else" Body ";"
    | "if" "(" Expression ")" Body ";" ;

F_Call
    : id "(" ")" ";"
    | id "(" ArgList ")" ";" ;
