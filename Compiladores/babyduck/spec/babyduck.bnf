/* BabyDuck Grammar combining lexical and syntax parts for gocc */

/* === LEXICAL PART === */

id        : 'a'-'z' { 'a'-'z' | '-' } ;
cte_int   : '0'-'9' { '0'-'9' } ;
cte_float : '0'-'9' { '0'-'9' } '.' '0'-'9' { '0'-'9' } ;
cte_string: '\'' { . } '\'' ;
!whitespace: ' ' | '\t' | '\r' | '\n' ;
!comment  : '*' '*' { . } '*' '*' ;

/* === SYNTAX PART === */

<<
import (
    "babyduck/token"
    "babyduck/data_structures"
)
// Creamos un contexto Ãºnico para todo el programa:
var ctx = data_structures.NewContext()
>>

Start
    : Reset Programa
      << ctx.ReturnContext() >>
    ;

/* No-terminal auxiliar que limpia el contexto */
Reset
    : empty
      << ctx.Reset() >>
    ;

Programa
    : ProgramId Vars Funcs "main" Body "end"
    ;

ProgramId
    : "program" id ";"
        << ctx.RegisterProgramId(string(X[1].(*token.Token).Lit)) >>
    ;

Vars
    : empty
    | "var" VarsDec
    ;

VarsDec
    : empty
    | VarList ":" Type ";" VarsDec 
    << ctx.RegisterVars(X[0].([]string), X[2].(int)) >>
    ;

VarList
    : id  
    << data_structures.MakeVarList(string(X[0].(*token.Token).Lit)) >>
    | id "," VarList 
    << data_structures.ConcatVarList(string(X[0].(*token.Token).Lit), X[2].([]string)) >>
    ;

Type
    : "int"   << data_structures.Int, nil >>
    | "float" << data_structures.Float, nil >>
    ;

Funcs
    : empty
    | Func Funcs ;

Func
    : FuncStart Vars Body "]" ";"
    << ctx.ExitFunction() >>
    ;

FuncStart
    : "void" id "(" ")" "[" 
    << ctx.RegisterAndEnterFunction(string(X[1].(*token.Token).Lit), data_structures.Void, []data_structures.Param{}) >>
    | "void" id "(" ParamList ")" "["
    << ctx.RegisterAndEnterFunction(string(X[1].(*token.Token).Lit), data_structures.Void, X[3].([]data_structures.Param)) >>
    ;

ParamList
    : id ":" Type
    << data_structures.MakeParam(string(X[0].(*token.Token).Lit),X[2].(int)) >>
    | id ":" Type "," ParamList 
    << data_structures.PrependParam(string(X[0].(*token.Token).Lit), X[2].(int), X[4].([]data_structures.Param)) >>    
    ;

Body
    : "{" StatementList "}" ;

StatementList
    : empty
    | Statement StatementList ;

Statement
    : Assign
    | Condition
    | Cycle
    | F_Call
    | Print ;

Assign
    : id "=" Expression ";" 
      << ctx.ValidateAssign(string(X[0].(*token.Token).Lit), X[2].(int)) >>
    ;

Expression
    : AddExpr RelExpr ;

RelExpr
    : empty
    | RelOp AddExpr << ctx.GenerateQuad() >> ;

RelOp
    : "<"
     << ctx.TranslateOp(string(X[0].(*token.Token).Lit)) >>
    | ">"
    << ctx.TranslateOp(string(X[0].(*token.Token).Lit)) >>
    | "!=" 
    << ctx.TranslateOp(string(X[0].(*token.Token).Lit)) >>
    ;

AddExpr
    : AddExpr MoreLess MulExpr << ctx.GenerateQuad() >>
    | MulExpr 
    ; 

MoreLess
    : "+" 
      << ctx.TranslateOp(string(X[0].(*token.Token).Lit)) >>
    | "-"
    << ctx.TranslateOp(string(X[0].(*token.Token).Lit))>>
    ;

MulExpr
    : MulExpr MulDiv Primary << ctx.GenerateQuad() >>
    | Primary 
    ; 

MulDiv
    : "*"
    << ctx.TranslateOp(string(X[0].(*token.Token).Lit))>>
    | "/"
    << ctx.TranslateOp(string(X[0].(*token.Token).Lit))>>
    ;

Primary
    : LeftPar Expression RightPar
    << data_structures.ReturnExpression(X[1].(int)) >>
    | id 
    << ctx.ResolveVarType(string(X[0].(*token.Token).Lit)) >>
    | cte_int 
    << ctx.ResolveCteInt(string(X[0].(*token.Token).Lit)) >>
    | cte_float 
    << ctx.ResolveCteFloat(string(X[0].(*token.Token).Lit)) >>
    ;

LeftPar
    : "(" 
    << ctx.TranslateOp(string(X[0].(*token.Token).Lit))>>
    ;

RightPar
    : ")" 
    << ctx.TranslateOp(string(X[0].(*token.Token).Lit))>>
    ;

Print
    : "print" "(" ")" ";"
    | "print" "(" ArgList ")" ";" ;

ArgList
    : Expression
    | Expression "," ArgList 
    | cte_string<< data_structures.String, nil >> ;

Cycle
    : "while" "(" Expression ")" "do" Body ";" ;

Condition
    : "if" "(" Expression ")" Body "else" Body ";"
    | "if" "(" Expression ")" Body ";" ;

F_Call
    : id "(" ")" ";"
    | id "(" ArgList ")" ";" ;